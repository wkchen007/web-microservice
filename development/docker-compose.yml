services:
  log-service:
    container_name: log-service
    depends_on:
      mongo:
        condition: service_healthy
    build:
      context: ./../log-service
      dockerfile: ./../log-service/log-service.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1

  mongo:
    image: 'mongo:7.0'
    container_name: mongo
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: logs
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    healthcheck:
      # 使用 mongosh 對 admin DB 做 ping
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')", "-u", "admin", "-p", "password", "--authenticationDatabase", "admin" ]
      interval: 10s
      timeout: 5s
      retries: 10
    volumes:
      - ./db-data/mongo/:/data/db

  mail-service:
    container_name: mail-service
    depends_on:
      mailhog:
        condition: service_healthy
    build:
      context: ./../mail-service
      dockerfile: ./../mail-service/mail-service.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      MAIL_DOMAIN: localhost
      MAIL_HOST: mailhog
      MAIL_PORT: 1025
      MAIL_ENCRYPTION: none
      MAIL_USERNAME: ""
      MAIL_PASSWORD: ""
      FROM_NAME: "Admin"
      FROM_ADDRESS: admin@example.com

  mailhog:
    image: 'mailhog/mailhog:latest'
    container_name: mailhog
    restart: always
    ports:
      - "1025:1025" # SMTP
      - "8025:8025" # Web UI http://localhost:8025
    healthcheck:
      # 確認 Web UI 可回應；wget 由 busybox 提供
      test: [ "CMD", "wget", "-qO-", "http://localhost:8025/api/v2/messages" ]
      interval: 10s
      timeout: 5s
      retries: 5

  listen-service:
    container_name: listen-service
    depends_on:
      rabbitmq:
        condition: service_healthy
    build:
      context: ./../listen-service
      dockerfile: ./../listen-service/listen-service.dockerfile
    deploy:
      mode: replicated
      replicas: 1

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672" # AMQP
      - "15672:15672" # 管理介面 http://localhost:15672
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "-q", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./db-data/rabbitmq/:/var/lib/rabbitmq/

  nft-service:
    build:
      context: ./../nft-service
      dockerfile: ./../nft-service/nft-service.dockerfile
    container_name: nft-service
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8080:8080"
    env_file:
      - ./../nft-service/.env
    environment:
      - CONFIG_PATH=configs/config.yaml
      - HTTP_ADDR=:8080
    healthcheck:
      test: [ "CMD", "wget", "-qO-", "http://localhost:8080/healthz" ]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  postgres:
    image: 'postgres:14.5'
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: nftweb
    logging:
      options:
        max-size: 10m
        max-file: "3"
    ports:
      - '5432:5432'
    volumes:
      - ./db-data/postgres/:/var/lib/postgresql/data/
      - ./sql/create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
